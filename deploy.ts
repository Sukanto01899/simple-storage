// const ethers = require("ethers");
// const fs = require("fs-extra");
// require("dotenv").config();

import { ethers } from "ethers";
import fs from 'fs'
// import * as fs from "fs-extra";
import "dotenv/config"

async function main() {
    // http://127.0.0.1:7545
    // 5777
    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL, undefined, {
        cacheTimeout: -1,
    });
    // const wallet = new ethers.Wallet("0xec19a1b7df65c3b418ab355c4a6d7dad00a147a363a779b4bc57182faf4a361c", provider);
    const encryptedjson = fs.readFileSync("./.encryptedKey.json", "utf-8");

    // read wallet using encrypted private key
    let wallet = ethers.Wallet.fromEncryptedJsonSync(
        encryptedjson,
        process.env.PASSWORD
    );
    wallet = wallet.connect(provider);

    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
    const bin = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8");

    const factory = new ethers.ContractFactory(abi, bin, wallet);
    console.log("Deploying...");
    const contract = await factory.deploy();
    await contract.waitForDeployment();
    const tx = await contract.store("10");
    await tx.wait(1);
    const data = await contract.getNum();

    console.log(data);

    // const nonce = await wallet.getNonce();

    // const tx = {
    //     nonce,
    //     gasPrice: 20000000000,
    //     gasLimit: 6721975,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b50610710806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631f11241f1461005c5780636057361d1461007857806367e0badb146100945780637f541402146100b2578063d4da005a146100e2575b600080fd5b6100766004803603810190610071919061036a565b610100565b005b610092600480360381019061008d91906103ca565b6101d7565b005b61009c6101e1565b6040516100a99190610406565b60405180910390f35b6100cc60048036038101906100c79190610562565b6101ea565b6040516100d99190610406565b60405180910390f35b6100ea610212565b6040516100f79190610406565b60405180910390f35b6001604051806040016040528085815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101aa929190610218565b50505082600283836040516101c09291906105db565b908152602001604051809103902081905550505050565b8060008190555050565b60008054905090565b60006002826040516101fc9190610663565b9081526020016040518091039020549050919050565b60005481565b828054610224906106a9565b90600052602060002090601f016020900481019282610246576000855561028d565b82601f1061025f57805160ff191683800117855561028d565b8280016001018555821561028d579182015b8281111561028c578251825591602001919060010190610271565b5b50905061029a919061029e565b5090565b5b808211156102b757600081600090555060010161029f565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102e2816102cf565b81146102ed57600080fd5b50565b6000813590506102ff816102d9565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261032a57610329610305565b5b8235905067ffffffffffffffff8111156103475761034661030a565b5b6020830191508360018202830111156103635761036261030f565b5b9250929050565b600080600060408486031215610383576103826102c5565b5b6000610391868287016102f0565b935050602084013567ffffffffffffffff8111156103b2576103b16102ca565b5b6103be86828701610314565b92509250509250925092565b6000602082840312156103e0576103df6102c5565b5b60006103ee848285016102f0565b91505092915050565b610400816102cf565b82525050565b600060208201905061041b60008301846103f7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61046f82610426565b810181811067ffffffffffffffff8211171561048e5761048d610437565b5b80604052505050565b60006104a16102bb565b90506104ad8282610466565b919050565b600067ffffffffffffffff8211156104cd576104cc610437565b5b6104d682610426565b9050602081019050919050565b82818337600083830152505050565b6000610505610500846104b2565b610497565b90508281526020810184848401111561052157610520610421565b5b61052c8482856104e3565b509392505050565b600082601f83011261054957610548610305565b5b81356105598482602086016104f2565b91505092915050565b600060208284031215610578576105776102c5565b5b600082013567ffffffffffffffff811115610596576105956102ca565b5b6105a284828501610534565b91505092915050565b600081905092915050565b60006105c283856105ab565b93506105cf8385846104e3565b82840190509392505050565b60006105e88284866105b6565b91508190509392505050565b600081519050919050565b60005b8381101561061d578082015181840152602081019050610602565b8381111561062c576000848401525b50505050565b600061063d826105f4565b61064781856105ab565b93506106578185602086016105ff565b80840191505092915050565b600061066f8284610632565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106c157607f821691505b6020821081036106d4576106d361067a565b5b5091905056fea2646970667358221220ec7f148ea1987adbd42fb67e44d40ac4d942017e98ad8f95950e30375e302c7464736f6c634300080d0033",
    //     chainId: 1337
    // }

    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse)
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
